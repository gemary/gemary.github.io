{"version":3,"sources":["asset/color.ts","component/SearchBar.tsx","component/Menu.tsx","component/footer.tsx","component/MasterPage.tsx","component/ItemPost.tsx","component/ListItemPost.tsx","component/Content.tsx","pages/About.tsx","pages/Contact.tsx","pages/DetailPost.tsx","App.tsx","serviceWorker.ts","reducer/reducers.ts","reducer/index.ts","actions/actions.ts","index.tsx"],"names":["color","SearchBar","props","useState","searchText","setSearchText","onSearch","onBlur","searchRef","useRef","initData","onChange","event","text","target","value","current","clearTimeout","setTimeout","className","type","placeholder","Buttons","to","pathname","link","MenuBlock","React","memo","data","searchData","setSearchData","hidden","setHidden","style","background","newFilter","Array","isArray","length","newData","filter","kw","title","toLowerCase","indexOf","map","e","key","pid","state","connect","fetchData","posts","footer","MasterPage","styles","width","height","margin","children","ItemPost","src","img","alt","date_created","decription","items","undefined","textDecoration","author","tag","date_updated","body","href","index","dateFormat","Date","getDate","getMonth","getFullYear","About","Contact","DetailPost","location","console","log","App","dispatch","useDispatch","useEffect","axios","get","then","result","payload","Content","path","exact","component","ListItemPost","Boolean","window","hostname","match","Initstate","RootReducer","combineReducers","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0300378.chunk.js","sourcesContent":["export  const color ={\n    background:\"#446965\",\n    popup:\"#ffffff\",\n    shadow:\"#e7e7e7\",\n    button:'#e8b14b',\n    title:'#dbf4f3',\n    MainBackGround:'#ded8d0'\n}","import React, { useState, useRef } from 'react';\nimport './css/search.css'\nimport '../App.css'\ntype SearchProps={\n    onSearch:any,\n    onBlur:any\n}\nexport function SearchBar(props:SearchProps) {\n    const [searchText,setSearchText] =useState(\"\")\n    const {onSearch,onBlur} =props\n    let initData:any\n    const searchRef = useRef(initData)\n    const handleValueChange =(event:any)=>{\n       const text= event.target.value\n       if (searchRef.current) {\n           clearTimeout(searchRef.current)\n       }\n       setSearchText(text)\n        searchRef.current= setTimeout(()=>{onSearch(text)},300);\n       \n      \n    }\n    return <input onBlur={onBlur} onChange={handleValueChange} className=\"seach_bar\" value={searchText} type='text' placeholder=\"Search....\" />\n    \n}","import React, { useState } from 'react'\nimport './css/Menu.css'\nimport '../App.css'\nimport {SearchBar} from './SearchBar'\nimport {color} from'../asset/color'\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\ntype propsButton = {\n    text:string,\n    link:string,\n}\n\nconst Buttons :React.FC<propsButton> =(props)=>{\n    return(\n        <div>\n            <Link className=\"btn_MenuItem\"  to={{pathname:props.link}}><span>{props.text}</span></Link>\n        </div>\n    )\n}\n\n const MenuBlock = React.memo((props:any)=>{\n    \n     const {data} =props\n     const [searchData,setSearchData] =useState([])\n     const [hidden,setHidden] = useState(false)\n    const handleSearchChange=(newFilter:string)=>{\n        if (!Array.isArray(data) && data[0].length > 0 ){return}\n        const newData = data[0].filter((kw:any)=>kw.title.toLowerCase().indexOf(newFilter.toLowerCase())> -1 )\n        newFilter !== \"\"?setSearchData(newData):setSearchData([])   \n    }\n    const handleBlur=()=>{\n        setHidden(true)\n    }\n    return(\n        <div className=\"Menu_container\" style={{background:color.popup}}>\n            <nav className=\"menuBar\">\n               <Buttons text=\"Home\" link=\"/\"/>\n               <Buttons text=\"About\" link=\"About\"/>\n               <Buttons text=\"Contact\" link=\"Contact\"/>\n            </nav>\n            <div className=\"searchBar\">\n                <SearchBar onBlur={handleBlur} onSearch={handleSearchChange}/>\n                <div className=\"search-Value-Container\">\n                {searchData.length > 0 && hidden===false ?searchData.map((e:any)=>{\n                      return  <Link className=\"search-Item\" key={e.pid} to={{pathname:`/${e.title}`,state:e}}><h4 >{e.title}</h4></Link>\n                }):\"\"}\n                </div>\n            </div>\n        </div>\n    )\n} )\nconst mapStateToProps = (state:any) => ({\n    data:state.fetchData.posts\n});\nexport default connect(mapStateToProps)(MenuBlock);\n","import React from 'react'\nimport '../App.css'\nexport default function footer(){\n    return(\n        <footer className=\"footer\">\n           <p className=\"copyright\"> Â© 2020  Gemary Blog</p> \n           <p  className=\"atribute\">Theme by Gemary</p>\n        </footer>\n    )\n}","import React from 'react';\nimport {color} from '../asset/color'\nimport   MenuBlock from \"./Menu\";\nimport Footer from './footer';\nexport function MasterPage(props:any){\n    const styles= {\n    background:color.background,\n    width:\"98%\",\n    height:'100%',\n    'borderRadius':'20px',\n    margin:'auto',\n}\n    const title ={\n        color:color.title,\n        width:'80%',\n        \"fontSize\":'4rem',\n        margin:'2rem auto',\n    }\n    return(\n        <div style={styles}>\n            <div className=\"title\">\n                <h1 style={title}>GEMARY</h1>\n            </div>\n            <MenuBlock />\n             {props.children}\n            <Footer/>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport  './css/content.css';\ntype ItemPost={\n    author: string\n    body: any\n    date_created: string |null\n    date_updated: string | null\n    decription: string\n    likes?: number\n    pid?: number\n    tag: string\n    title: string,\n    img?:string\n}\n\nexport const ItemPost: React.FC<ItemPost> =(props)=>{\n    return(\n        <div className=\"item_container\">\n            <div className=\"left_content\">\n                <div className=\"wrap_img\">\n                   <img className=\"custom_Img\" src={ props.img ?props.img :\"https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/412/square_480/AccessibleReact_1000.png\" } alt=\"\"/>\n                   <p> {props.date_created}</p>\n                </div>\n             \n            </div>\n            <div className=\"right_content\">\n                  <h3 className=\"item_title\">{props.title}</h3>\n                   <div className=\"description\">\n                       {props.decription}\n                   </div>\n            </div>\n           \n        </div>\n    )\n}","import React from 'react';\nimport {ItemPost} from './ItemPost';\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\n const ListItemPost=(data:any)=>{\n    const items =[...data.data.fetchData.posts]\n    return(\n        <div >\n            {items[0] !== undefined?items[0].map((data:any)=>{\n               return <Link style={{textDecoration:'none' ,color:'black'}}\n              key ={data.pid}\n              to={{pathname:`/${data.title}`,state:data}}>\n                <ItemPost  \n                author={data.author} \n                tag={data.tag} date_created={data.date_created} \n                date_updated={data.date_updated} title={data.title}\n                body={data.body}\n                decription={data.decription}/>\n               </Link>\n            }):null}\n        </div>\n    )\n    \n}\nconst mapStateToProps = (state:any) => ({\n        data:state\n  });\nexport default  connect(mapStateToProps)(ListItemPost);","import React from 'react'\nimport './css/content.css';\nimport '../App.css'\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\ntype content={\n    data:any,\n    children:any\n}\n\n function ContentContainer(props:content){\n    const {data} = props\n    \n    return(\n        <div className=\"container_Content\">\n            <div className=\"left_content\">\n              {props.children}\n            </div>\n            <div className=\"right_content\">\n                <div className=\"social_network_container\">\n                    <h3>Social Network</h3>\n                    <div className=\"icon_container\">\n                    <a href=\"https://www.facebook.com/\">\n                        <img src=\"https://raw.githubusercontent.com/ngxson/storeData/master/email_icons/icons8-facebook-48.png\" alt=\"\"/>\n                    </a>\n                    <a href=\"https://github.com/gemary/\">\n                        <img src=\"https://raw.githubusercontent.com/ngxson/storeData/master/email_icons/icons8-github-48.png\" alt=\"\"/>\n                    </a>\n                    <a href=\"https://www.linkedin.com/feed/\">\n                        <img src=\"https://raw.githubusercontent.com/ngxson/storeData/master/email_icons/icons8-linkedin-48.png\" alt=\"\"/>\n                    </a>\n                    </div>\n                </div>\n                <div className=\"tag_container\">\n                    <h3>Tag</h3>\n                    <a href=\"http://localhost:3000/About\">JS</a>\n                    <a href=\"http://localhost:3000/About\">REACTJS</a>\n                    <a href=\"http://localhost:3000/About\">REACT NATIVE</a>\n                  \n                </div>\n                <div className=\"recent_posts\">\n                    <h3>Recent Post</h3>\n                    { data[0] !== undefined? data[0].map((e:any,index:number)=>{\n                    const dateFormat = new Date(e.date_created) \n                    return index <3?<section className=\"recent-item\" key={e.pid}> \n                        <Link className=\"customLink\" to={{pathname:`/${e.tag}`,state:e}} >\n                            <h4>{e.title}</h4>\n                        </Link> \n                        <span className=\"customDate\">Create at:{` ${dateFormat.getDate()}/${dateFormat.getMonth()+1}/${dateFormat.getFullYear()}`}</span> \n                    </section> :null\n                    }):null}\n                </div>\n            </div>\n         \n        </div>\n    )\n}\nconst mapStateToProps = (state:any) => ({\n    data:state.fetchData.posts\n});\nexport default  connect(mapStateToProps)(ContentContainer);","import React from \"react\";\n\nconst About =()=>{\n    return(\n        <div>\n            <h1>About</h1>\n        </div>\n    )\n}\n\n\nexport default About","import React from \"react\";\n\nconst Contact =()=>{\n    return(\n        <div>\n            <h1>Contact</h1>\n        </div>\n    )\n}\n\n\nexport default Contact","import React from 'react';\n\ntype Content ={\n   location:{\n       state:{\n            title:string,\n            des:string,\n            body:any,\n            date_create:string,\n            date_update:string,\n            tag:string,\n            author:string,\n            view?:number\n       }\n   }\n}\n\nexport  const DetailPost: React.FC<Content>=(props)=>{\n    const {location} =props\n    console.log(typeof location.state.body);\n    \n    return(\n        <div>\n            <code>\n            {location.state.body}\n            </code>\n          \n        </div>\n    )\n}","import React ,{useEffect}from 'react';\nimport axios from 'axios';\n\nimport {MasterPage} from './component';\nimport ListItemPost from './component/ListItemPost';\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport { DetailPost } from \"./pages/DetailPost\";\nimport  ContentContainer from \"./component/Content\";\nimport './App.css'\n\nimport { useDispatch } from 'react-redux';\n\nfunction App() {\n\n const dispatch = useDispatch()\n  useEffect(()=>{\n          axios.get('/api/getAllPost').then( (result)=>{\n              dispatch({type:\"FETCH_DB_POSTS\",payload:result.data})\n          })\n      return()=>{  \n        \n      }\n  },[dispatch])\n\n  return (\n    <div className=\"App\">\n      <Router>\n      <MasterPage>\n        <ContentContainer>\n        <Switch>\n           <Route path=\"/\" exact component={ListItemPost} />\n          <Route path=\"/About\" component={About} />\n          <Route path=\"/Contact\" component={Contact} />\n          <Route path=\"/:content\" component={DetailPost}/>\n        </Switch>\n        </ContentContainer>\n        </MasterPage>   \n      </Router>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import  {FETCH_DB_POSTS,REMOVE_DB_POSTS,Actions,blogPosts}  from '../actions/actions';\nconst Initstate:blogPosts={\n    posts:[]\n}\n\n\nexport const fetchData = (state =Initstate,actions:Actions):blogPosts =>{\n    switch (actions.type) {\n        case FETCH_DB_POSTS:\n            return {\n                posts:[...state.posts,actions.payload]\n            };\n        case REMOVE_DB_POSTS:\n            return state\n           \n        default:\n            return state\n          \n    }\n}\n\n","import { fetchData} from \"./reducers\";\nimport {combineReducers  } from \"redux\";\n\n\nconst RootReducer =combineReducers({\n    fetchData\n})\nexport default RootReducer\nexport type Rootstate =ReturnType<typeof RootReducer >","export const FETCH_DB_POSTS = \"FETCH_DB_POSTS\"\n\nexport const REMOVE_DB_POSTS = \"REMOVE_DB_POSTS\"\n\ninterface Fetchdata {\n    type: typeof FETCH_DB_POSTS\n    payload: Post\n  }\n  \n  interface Removedata {\n    type: typeof REMOVE_DB_POSTS\n    payload: {\n     \n    }\n  }\n\n interface Post {\n  title:string,\n  body:any,\n  decription:string,\n  tag:string,\n  author:string,\n  like:number,\n  date_created:string,\n  date_updated:string\n}\n\nexport interface blogPosts{\n  posts: Post[]\n}\n  export type Actions =Fetchdata |Removedata\n  \n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore,compose } from 'redux';\n\nimport RootReducer from \"./reducer\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(RootReducer,composeEnhancers());\n\nReactDOM.render(\n  <Provider store={store} >\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}